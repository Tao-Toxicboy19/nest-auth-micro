// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: proto/exchange.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../../../google/protobuf/empty";

export const protobufPackage = "exchange";

export interface Key {
  apiKey?: string | undefined;
  secretKey?: string | undefined;
  statusCode?: number | undefined;
  message?: string | undefined;
}

export interface CreateExchangeDto {
  key: Key | undefined;
}

export interface ValidateKeyDto {
  key: Key | undefined;
}

export interface ExchangeResponse {
  key: Key | undefined;
}

export const EXCHANGE_PACKAGE_NAME = "exchange";

export interface ExchangeServiceClient {
  createExchange(request: CreateExchangeDto): Observable<Empty>;

  validateKey(request: ValidateKeyDto): Observable<ExchangeResponse>;
}

export interface ExchangeServiceController {
  createExchange(request: CreateExchangeDto): void;

  validateKey(request: ValidateKeyDto): Promise<ExchangeResponse> | Observable<ExchangeResponse> | ExchangeResponse;
}

export function ExchangeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createExchange", "validateKey"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EXCHANGE_SERVICE_NAME = "ExchangeService";
