// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: proto/predict.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "predict";

export interface Empty {
}

export interface Predict {
  symbol: string;
  date: number;
  currentPrice: number;
  predictedPrice: number;
}

export interface PredictResponse {
  predict: Predict[];
}

export interface TimeStampReq {
  timeStamp: number;
}

export const PREDICT_PACKAGE_NAME = "predict";

export interface PredictServiceClient {
  predict(request: Empty): Observable<Empty>;

  deleteall(request: TimeStampReq): Observable<Empty>;

  update(request: TimeStampReq): Observable<Empty>;

  plot(request: Empty): Observable<PredictResponse>;

  getData(request: TimeStampReq): Observable<PredictResponse>;
}

export interface PredictServiceController {
  predict(request: Empty): Promise<Empty> | Observable<Empty> | Empty;

  deleteall(request: TimeStampReq): Promise<Empty> | Observable<Empty> | Empty;

  update(request: TimeStampReq): Promise<Empty> | Observable<Empty> | Empty;

  plot(request: Empty): Promise<PredictResponse> | Observable<PredictResponse> | PredictResponse;

  getData(request: TimeStampReq): Promise<PredictResponse> | Observable<PredictResponse> | PredictResponse;
}

export function PredictServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["predict", "deleteall", "update", "plot", "getData"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PredictService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PredictService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PREDICT_SERVICE_NAME = "PredictService";
