// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: proto/indicator.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "indicator";

export interface FetchPriceDto {
  ema: number;
  symbol: string;
  timeframe: string;
}

export interface CalulateEMADto {
  price: number[];
  ema: number;
}

export interface EMAResponse {
  ema: number;
  lastPrice: number;
}

export interface FetchPriceResponse {
  candles: string;
}

export const INDICATOR_PACKAGE_NAME = "indicator";

export interface IndicatorServiceClient {
  fetchPrice(request: FetchPriceDto): Observable<FetchPriceResponse>;

  calulateEma(request: CalulateEMADto): Observable<EMAResponse>;
}

export interface IndicatorServiceController {
  fetchPrice(request: FetchPriceDto): Promise<FetchPriceResponse> | Observable<FetchPriceResponse> | FetchPriceResponse;

  calulateEma(request: CalulateEMADto): Promise<EMAResponse> | Observable<EMAResponse> | EMAResponse;
}

export function IndicatorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["fetchPrice", "calulateEma"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("IndicatorService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("IndicatorService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const INDICATOR_SERVICE_NAME = "IndicatorService";
